{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInpuValue","onSubmit","e","preventDefault","trim","length","cats","type","name","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAyCeA,EAtCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAEtB,EAAsCC,mBAAU,IAAhD,mBAAQC,EAAR,KAAqBC,EAArB,KAiBA,OAEE,sBAAMC,SAba,SAAEC,GAErBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OACzCN,EAAc,MAOhB,SACE,uBAAOO,KAAK,OACVC,KAAK,cACLC,YAAY,oBACZC,MAAQX,EACRY,SAtBoB,SAAET,GAC1BF,EAAcE,EAAEU,OAAOF,a,+BCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAThB,kBAadM,GAbc,4CAAH,sDCSLO,EAVK,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,GAAKC,EAAkB,EAAlBA,MAAQV,EAAU,EAAVA,IAElC,OADAc,QAAQC,IAAI,CAAEN,KAAKC,QAAQV,QAEzB,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCoBKS,EAtBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEjB,ECFyB,SAAEA,GAC3B,MAA6BhB,mBAAS,CACpCuB,KAAK,GACLe,SAAS,IAFX,mBAAQC,EAAR,KAAgBC,EAAhB,KAqBA,OAZAC,qBAAW,WACT1B,EAASC,GACN0B,MAAM,SAAAhB,GACLiB,YAAW,WACTH,EAAS,CACPjB,KAAMG,EACNY,SAAS,MAEV,UAEL,CAAEtB,IAECuB,EDpBoBK,CAAY5B,GAA/BO,EAAR,EAAQA,KAAOe,EAAf,EAAeA,QAEf,OACE,qCACE,6BAAKtB,IACJsB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SAEIX,EAAKE,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEOA,GADAA,EAAIC,aEYRkB,EAzBM,WAGnB,MAAsC7C,mBAAU,CAAE,eAAlD,mBAAQ8C,EAAR,KAAoB/C,EAApB,KAGA,OACE,qCACE,8CACA,cAAE,EAAF,CAAcA,cAAkBA,IAChC,uBAEA,6BAEI+C,EAAWrB,KAAK,SAAAT,GAAQ,OACtB,cAAE,EAAF,CAEEA,SAAaA,GADNA,Y,MCdrB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.05721d7a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n  \r\n  const [ inputValue , setInpuValue ] = useState( '' );\r\n\r\n  const handleInputChange = ( e ) => {\r\n    setInpuValue( e.target.value );\r\n  }\r\n\r\n  const handleSubmit = ( e ) => {\r\n\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2 ){\r\n      setCategories( cats => [ inputValue , ...cats ] );\r\n      setInpuValue( '' );\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    \r\n    <form onSubmit={ handleSubmit }>\r\n      <input type=\"text\"\r\n        name=\"txtCategory\"\r\n        placeholder=\"Ingrese Categoria\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }/>\r\n      \r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default AddCategory\r\n","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ISa0GqQGtcO651iB0B1CffHINPkcW1hw`\r\n  const resp = await fetch( url );\r\n  const {data} = await resp.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    }\r\n  }); \r\n\r\n  return gifs;\r\n}; ","import React from 'react'\r\n\r\nconst GifGridItem = ({ id , title , url }) => {\r\n  console.log({ id , title , url });\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport {useFetchGif} from '../hooks/useFetchGif'\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nconst GifGrid = ( {category} ) => {\r\n \r\n  const { data , loading } = useFetchGif(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {\r\n          data.map( (img) => (\r\n            <GifGridItem \r\n              key={img.id}\r\n              { ...img }\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  ) \r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\n\r\nimport { getGifs } from './../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGif = ( category ) => {\r\n  const [ state , setState ] = useState({\r\n    data:[],\r\n    loading: true\r\n  })\r\n\r\n  /* \r\n  Se utiliza para evitar que se vuelva a enviar la solicitud http\r\n  cuando se vuelve a renderizar un componente\r\n  */\r\n  useEffect( () => {\r\n    getGifs( category )\r\n      .then( img => {\r\n        setTimeout(() => {\r\n          setState({ \r\n            data: img,\r\n            loading: false\r\n           })\r\n        }, 3000);\r\n      } ); \r\n  } , [ category ] )\r\n\r\n  return state; \r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n  \r\n  \r\n  const [ categories, setCategories ] = useState( [ 'Death note' ] );\r\n  \r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      < AddCategory setCategories = { setCategories } />\r\n      <hr/>\r\n\r\n      <ol>\r\n        { \r\n          categories.map( category => (\r\n            < GifGrid \r\n              key = {category }\r\n              category = { category }/>\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}